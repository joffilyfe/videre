!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define("videre",["exports"],t):t(e.Videre=e.Videre||{})}(this,function(e){"use strict";function t(e,t){var n=c.createTextNode(t);e.appendChild(n)}function n(e,i){i.forEach(function(i){Array.isArray(i)?n(e,i):i instanceof window.Element?e.appendChild(i):"string"==typeof i&&t(e,i)})}function i(e,t){return t?void Object.keys(t).forEach(function(n){n in e.style?e.style[n]=t[n]:console.warn("${styleName} is not a valid style for a <${el.tagName.toLowerCase()}>")}):void e.removeAttribute("styles")}function r(e,r){var u=c.createElement(e);Array.isArray(r)?n(u,r):r instanceof window.Element?u.appendChild(r):"string"==typeof r?t(u,r):"object"===("undefined"==typeof r?"undefined":o(r))&&Object.keys(r).forEach(function(e){if(e in u||f.includes(e)){var t=r[e];"style"===e?i(u,t):t&&(u[e]=t)}else console.warn("${propName} is not a valid property of a <${type}>")});for(var s=arguments.length,a=Array(s>2?s-2:0),l=2;l<s;l++)a[l-2]=arguments[l];return a&&n(u,a),u}var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},l=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},c=document,f=["role"],p=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return r.apply(void 0,["button"].concat(t))},d=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return r.apply(void 0,["div"].concat(t))},h=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return r.apply(void 0,["video"].concat(t))},y=function(){function e(t){u(this,e),this.el=t}return s(e,[{key:"template",value:function(){return this.el}},{key:"bindEvents",value:function(){}},{key:"listen",value:function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:document,r=i.querySelector(t);r?r.addEventListener(e,function(e){return n(e)},!1):console.error(e+" event for "+t+" fail.")}},{key:"element",get:function(){return this.el},set:function(e){this.el=e}}]),e}(),v="#videre #progress-container",m="#videre .player-button",b=function(e){function t(){u(this,t);var e=l(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.el=e.el?e.el:h(),e}return a(t,e),s(t,[{key:"bindEvents",value:function(){var e=this;this.listen("click",m,function(){return e.toggle()}),this.listen("click",v,function(t){return e.playTime(t)}),this.listen("mousemove",v,function(t){return e.playTime(t)})}},{key:"play",value:function(){return this.el.paused&&this.el.play()}},{key:"pause",value:function(){return!this.el.paused&&this.el.pause()}},{key:"toggle",value:function(){this.play()||this.pause()}},{key:"playTime",value:function(e){var t=document.querySelector(v);if("true"===t.getAttribute("data-click")||"click"==e.type){var n=100*e.offsetX/t.offsetWidth,i=this.el.duration*n/100;this.el.currentTime=i}}},{key:"template",value:function(){return d({className:"player-video"},this.element)}},{key:"source",set:function(e){this.el.src=e}},{key:"poster",set:function(e){this.el.poster=e}}]),t}(y),w=function(e){function t(){u(this,t);var e=l(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.el=e.el?e.el:d({id:"progress-bar"}),e.container=d({id:"progress-container"},e.el),e}return a(t,e),s(t,[{key:"bindEvents",value:function(){var e=this;this.listen("timeupdate","video",function(t){return e.updateWidth(t)}),this.listen("mousedown",v,function(t){return e.mouseDown(t)}),this.listen("mouseup",v,function(t){return e.mouseDown(t)})}},{key:"updateWidth",value:function(e){var t=e.target,n=100*t.currentTime/t.duration;this.element.style.width=n+"%"}},{key:"mouseDown",value:function(e){"mousedown"==e.type?e.target.setAttribute("data-click","true"):e.target.setAttribute("data-click","false")}},{key:"template",value:function(){return this.container}}]),t}(y),g=function(e){function t(){u(this,t);var e=l(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.el=e.el?e.el:p({className:"player-button -play icon-play"}),e}return a(t,e),s(t,[{key:"bindEvents",value:function(){var e=this;this.listen("play","video",function(t){return e.changeButtonIcon(t)}),this.listen("pause","video",function(t){return e.changeButtonIcon(t)})}},{key:"changeButtonIcon",value:function(e){e.target.paused?(this.el.classList.add("icon-play"),this.el.classList.remove("icon-pause")):(this.el.classList.add("icon-pause"),this.el.classList.remove("icon-play"))}},{key:"template",value:function(){return d({id:"btn"},this.el)}}]),t}(y),k=function(e){function t(){u(this,t);var e=l(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.el=e.el?e.el:d({className:"player-wrapper",id:"videre"}),e}return a(t,e),s(t,[{key:"add",value:function(e){this.el.appendChild(e)}},{key:"width",set:function(e){this.el.style.width=e}},{key:"height",set:function(e){this.el.style.height=e}}]),t}(y),_=new k,E=new b,O=new g,j=new w,A=d({className:"player-overlay"},d({className:"player-control"},[j.template(),d({className:"control-container"},O.template())]));_.add(E.template()),_.add(A);var S=function(){function e(t){u(this,e),this.currentVideo=E,this.wrapper=_,this.container=document.querySelector(t.containerId)?document.querySelector(t.containerId):document.querySelector("body")}return s(e,[{key:"render",value:function(){this.container.appendChild(_.template())}},{key:"bindEvents",value:function(){E.bindEvents(),O.bindEvents(),j.bindEvents()}},{key:"video",get:function(){return this.currentVideo}}]),e}(),N=function e(t){u(this,e),this.view=new S(t),this.video=this.view.video?this.view.video:null,this.wrapper=this.view.wrapper?this.view.wrapper:null,this.video&&(this.video.source=t.src?t.src:"",this.video.poster=t.poster?t.poster:""),this.wrapper&&(this.wrapper.width=t.width?t.width:600,this.wrapper.height=t.height?t.height:400),this.view.render(),this.view.bindEvents()},P=function(e){return new N(e)};e.Player=P,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
